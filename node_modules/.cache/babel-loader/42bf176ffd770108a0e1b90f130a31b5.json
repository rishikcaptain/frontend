{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rishi\\\\Downloads\\\\MyCrypto-Front\\\\MyCrypto-FrontEnd-main\\\\src\\\\Context\\\\WatchlistState.js\",\n    _s = $RefreshSig$();\n\nimport WatchlistContext from \"./watchlistContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WatchlistState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\"; // \"https://git.heroku.com/my--crypto.git\"\n  // \"http://localhost:5000\"\n\n  const watchlistsInitial = [];\n  const [watchlists, setWatchlists] = useState(watchlistsInitial); // Get all Watchlists\n\n  const getWatchlists = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/watchlist/fetchallwatchlists`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setWatchlists(json);\n  }; // Add a Watchlist\n\n\n  const addWatchlist = async coinid => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`${host}/api/watchlist/addwatchlist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        coinid\n      })\n    });\n    const watchlist = await response.json();\n    console.log(watchlist);\n    setWatchlists(watchlists.concat(watchlist));\n  }; // Delete a Watchlist\n\n\n  const deleteWatchlist = async id => {\n    // API Call\n    const response = await fetch(`${host}/api/watchlist/deletewatchlist/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    }); // eslint-disable-next-line\n\n    const json = response.json();\n    const newWatchlists = watchlists.filter(watchlist => {\n      return watchlist._id !== id;\n    });\n    setWatchlists(newWatchlists);\n  }; // Edit a Watchlist\n\n\n  const editWatchlist = async (id, coinid) => {\n    // API Call \n    const response = await fetch(`${host}/api/watchlist/updatewatchlist/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        coinid\n      })\n    }); // eslint-disable-next-line\n\n    const json = await response.json();\n    let newWatchlists = JSON.parse(JSON.stringify(watchlists)); // Logic to edit in client\n\n    for (let index = 0; index < newWatchlists.length; index++) {\n      const element = newWatchlists[index];\n\n      if (element._id === id) {\n        newWatchlists[index].coinid = coinid;\n        break;\n      }\n    }\n\n    setWatchlists(newWatchlists);\n  };\n\n  return /*#__PURE__*/_jsxDEV(WatchlistContext.Provider, {\n    value: {\n      watchlists,\n      addWatchlist,\n      deleteWatchlist,\n      editWatchlist,\n      getWatchlists\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WatchlistState, \"qIuJEXGhuGkR85bWEB9TKy1LdcE=\");\n\n_c = WatchlistState;\nexport default WatchlistState;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchlistState\");","map":{"version":3,"sources":["C:/Users/rishi/Downloads/MyCrypto-Front/MyCrypto-FrontEnd-main/src/Context/WatchlistState.js"],"names":["WatchlistContext","useState","WatchlistState","props","host","watchlistsInitial","watchlists","setWatchlists","getWatchlists","response","fetch","method","headers","localStorage","getItem","json","addWatchlist","coinid","body","JSON","stringify","watchlist","console","log","concat","deleteWatchlist","id","newWatchlists","filter","_id","editWatchlist","parse","index","length","element","children"],"mappings":"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","sourcesContent":["import WatchlistContext from \"./watchlistContext\";\nimport { useState } from \"react\";\n\nconst WatchlistState = (props) => {\n  const host = \"http://localhost:5000\"\n    // \"https://git.heroku.com/my--crypto.git\"\n  // \"http://localhost:5000\"\n  const watchlistsInitial = []\n  const [watchlists, setWatchlists] = useState(watchlistsInitial)\n\n  // Get all Watchlists\n  const getWatchlists = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/watchlist/fetchallwatchlists`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n\n    const json = await response.json() \n    setWatchlists(json)\n  }\n\n  // Add a Watchlist\n  const addWatchlist = async (coinid) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`${host}/api/watchlist/addwatchlist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({coinid})\n    });\n\n      const watchlist = await response.json();\n      console.log(watchlist)\n    setWatchlists(watchlists.concat(watchlist))\n  }\n\n  // Delete a Watchlist\n  const deleteWatchlist = async (id) => {\n    // API Call\n    const response = await fetch(`${host}/api/watchlist/deletewatchlist/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n         // eslint-disable-next-line\n    const json = response.json(); \n    const newWatchlists = watchlists.filter((watchlist) => { return watchlist._id !== id })\n    setWatchlists(newWatchlists)\n  }\n\n  // Edit a Watchlist\n  const editWatchlist = async (id, coinid) => {\n    // API Call \n    const response = await fetch(`${host}/api/watchlist/updatewatchlist/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({coinid})\n    });\n         // eslint-disable-next-line\n    const json = await response.json(); \n\n     let newWatchlists = JSON.parse(JSON.stringify(watchlists))\n    // Logic to edit in client\n    for (let index = 0; index < newWatchlists.length; index++) {\n      const element = newWatchlists[index];\n      if (element._id === id) {\n        newWatchlists[index].coinid = coinid;\n\n        break; \n      }\n    }  \n    setWatchlists(newWatchlists);\n  }\n\n  return (\n    <WatchlistContext.Provider value={{ watchlists, addWatchlist, deleteWatchlist, editWatchlist, getWatchlists }}>\n      {props.children}\n    </WatchlistContext.Provider>\n  )\n\n}\nexport default WatchlistState;"]},"metadata":{},"sourceType":"module"}