{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rishi\\\\Downloads\\\\MyCrypto-Front\\\\frontend\\\\src\\\\Context\\\\PortfolioState.js\",\n    _s = $RefreshSig$();\n\nimport PortfolioContext from \"./portfolioContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PortfolioState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\"; // \"https://git.heroku.com/my--crypto.git\"\n  // \"http://localhost:5000\"\n\n  const portfoliosInitial = [];\n  const [portfolios, setPortfolios] = useState(portfoliosInitial); // Get all Portfolios\n\n  const getPortfolios = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/portfolio/fetchallportfolios`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setPortfolios(json);\n  }; // Add a Portfolio\n\n\n  const addPortfolio = async (coinid, amount) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`${host}/api/portfolio/addportfolio`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        coinid,\n        amount\n      })\n    });\n    const portfolio = await response.json();\n    setPortfolios(portfolios.concat(portfolio));\n  }; // Delete a Portfolio\n\n\n  const deletePortfolio = async id => {\n    // API Call\n    const response = await fetch(`${host}/api/portfolio/deleteportfolio/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    }); // eslint-disable-next-line\n\n    const json = response.json();\n    const newPortfolios = portfolios.filter(portfolio => {\n      return portfolio._id !== id;\n    });\n    setPortfolios(newPortfolios);\n  }; // Edit a Portfolio\n\n\n  const editPortfolio = async (id, coinid, amount) => {\n    // API Call \n    const response = await fetch(`${host}/api/portfolio/updateportfolio/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        coinid,\n        amount\n      })\n    }); // eslint-disable-next-line\n\n    const json = await response.json();\n    let newPortfolios = JSON.parse(JSON.stringify(portfolios)); // Logic to edit in client\n\n    for (let index = 0; index < newPortfolios.length; index++) {\n      const element = newPortfolios[index];\n\n      if (element._id === id) {\n        newPortfolios[index].coinid = coinid;\n        newPortfolios[index].amount = amount;\n        break;\n      }\n    }\n\n    setPortfolios(newPortfolios);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PortfolioContext.Provider, {\n    value: {\n      portfolios,\n      addPortfolio,\n      deletePortfolio,\n      editPortfolio,\n      getPortfolios\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PortfolioState, \"D/edFQwBDVcBxddWfSLW90mbMlw=\");\n\n_c = PortfolioState;\nexport default PortfolioState;\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfolioState\");","map":{"version":3,"sources":["C:/Users/rishi/Downloads/MyCrypto-Front/frontend/src/Context/PortfolioState.js"],"names":["PortfolioContext","useState","PortfolioState","props","host","portfoliosInitial","portfolios","setPortfolios","getPortfolios","response","fetch","method","headers","localStorage","getItem","json","addPortfolio","coinid","amount","body","JSON","stringify","portfolio","concat","deletePortfolio","id","newPortfolios","filter","_id","editPortfolio","parse","index","length","element","children"],"mappings":"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","sourcesContent":["import PortfolioContext from \"./portfolioContext\";\nimport {  useState } from \"react\";\n\nconst PortfolioState = (props) => {\n  const host = \"http://localhost:5000\"\n    // \"https://git.heroku.com/my--crypto.git\"\n    // \"http://localhost:5000\"\n  const portfoliosInitial = []\n  const [portfolios, setPortfolios] = useState(portfoliosInitial)\n\n  // Get all Portfolios\n  const getPortfolios = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/portfolio/fetchallportfolios`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json() \n    setPortfolios(json)\n  }\n\n  // Add a Portfolio\n  const addPortfolio = async (coinid, amount) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`${host}/api/portfolio/addportfolio`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({coinid, amount})\n    });\n\n    const portfolio = await response.json();\n    setPortfolios(portfolios.concat(portfolio))\n  }\n\n  // Delete a Portfolio\n  const deletePortfolio = async (id) => {\n    // API Call\n    const response = await fetch(`${host}/api/portfolio/deleteportfolio/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    // eslint-disable-next-line\n    const json = response.json(); \n    const newPortfolios = portfolios.filter((portfolio) => { return portfolio._id !== id })\n    setPortfolios(newPortfolios)\n  }\n\n  // Edit a Portfolio\n  const editPortfolio = async (id, coinid, amount) => {\n    // API Call \n    const response = await fetch(`${host}/api/portfolio/updateportfolio/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({coinid, amount})\n    });\n    // eslint-disable-next-line\n    const json = await response.json(); \n\n     let newPortfolios = JSON.parse(JSON.stringify(portfolios))\n    // Logic to edit in client\n    for (let index = 0; index < newPortfolios.length; index++) {\n      const element = newPortfolios[index];\n      if (element._id === id) {\n        newPortfolios[index].coinid = coinid;\n        newPortfolios[index].amount = amount;\n        break; \n      }\n    }  \n    setPortfolios(newPortfolios);\n  }\n \n  return (\n    <PortfolioContext.Provider value={{ portfolios, addPortfolio, deletePortfolio, editPortfolio, getPortfolios }}>\n      {props.children}\n    </PortfolioContext.Provider>\n  )\n\n}\nexport default PortfolioState;"]},"metadata":{},"sourceType":"module"}